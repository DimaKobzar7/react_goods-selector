{"version":3,"sources":["App.tsx","index.tsx"],"names":["goods","App","state","selectedGood","isSelected","good","setState","deleteGood","this","className","type","onClick","map","chosenElement","classNames","Component","ReactDOM","render","document","getElementById"],"mappings":"2PAMaA,EAAQ,CACnB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOWC,EAAb,4MACEC,MAAyB,CACvBC,aAAc,OAFlB,EAKEC,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEH,aAAcE,KANlC,EASEE,WAAa,WACX,EAAKD,SAAS,CAAEH,aAAc,MAVlC,4CAaE,WAAU,IAAD,OACCA,EAAiBK,KAAKN,MAAtBC,aAER,OAEE,uBAAMM,UAAU,oBAAhB,UACGN,EAEG,qBAAIM,UAAU,sCAAd,oBACMN,EADN,gBAGE,wBACE,UAAQ,cACRO,KAAK,SACLD,UAAU,cACVE,QAASH,KAAKD,gBAIlB,oBAAIE,UAAU,QAAd,+BAGJ,uBAAOA,UAAU,QAAjB,SACE,gCACGT,EAAMY,KAAI,SAAAP,GACT,IAAMQ,EAAgBV,IAAiBE,EAEvC,OACE,qBACE,UAAQ,OAERI,UAAWK,IAAW,CACpB,+BAAgCD,IAJpC,UAOGA,EACC,6BACE,wBACE,UAAQ,eACRH,KAAK,SACLD,UAAU,iBACVE,QAAS,EAAKJ,WAJhB,iBAUF,6BACE,wBACE,UAAQ,YACRG,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAM,EAAKP,WAAWC,IAJjC,iBAUJ,oBAAI,UAAQ,YAAYI,UAAU,eAAlC,SACGJ,MA7BEA,iBA3CvB,GAAyBU,aCpBzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6cc31596.chunk.js","sourcesContent":["import { Component } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGood: string\n};\n\nexport class App extends Component<{}, State> {\n  state: Readonly<State> = {\n    selectedGood: 'Jam',\n  };\n\n  isSelected = (good: string) => {\n    this.setState({ selectedGood: good });\n  };\n\n  deleteGood = () => {\n    this.setState({ selectedGood: '' });\n  };\n\n  render() {\n    const { selectedGood } = this.state;\n\n    return (\n\n      <main className=\"section container\">\n        {selectedGood\n          ? (\n            <h1 className=\"title is-flex is-align-items-center\">\n              {`${selectedGood} is selected`}\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"ClearButton\"\n                type=\"button\"\n                className=\"delete ml-3\"\n                onClick={this.deleteGood}\n              />\n            </h1>\n          ) : (\n            <h1 className=\"title\">No goods selected</h1>\n          )}\n\n        <table className=\"table\">\n          <tbody>\n            {goods.map(good => {\n              const chosenElement = selectedGood === good;\n\n              return (\n                <tr\n                  data-cy=\"Good\"\n                  key={good}\n                  className={classNames({\n                    'has-background-success-light': chosenElement,\n                  })}\n                >\n                  {chosenElement ? (\n                    <td>\n                      <button\n                        data-cy=\"RemoveButton\"\n                        type=\"button\"\n                        className=\"button is-info\"\n                        onClick={this.deleteGood}\n                      >\n                        -\n                      </button>\n                    </td>\n                  ) : (\n                    <td>\n                      <button\n                        data-cy=\"AddButton\"\n                        type=\"button\"\n                        className=\"button\"\n                        onClick={() => this.isSelected(good)}\n                      >\n                        +\n                      </button>\n                    </td>\n                  )}\n                  <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n                    {good}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </main>\n    );\n  }\n}\n\n// готовый вариант с коментами но через тернарники\n// import { Component } from 'react';\n// import classNames from 'classnames';\n\n// import 'bulma/css/bulma.css';\n// import './App.scss';\n\n// export const goods = [\n//   'Dumplings',\n//   'Carrot',\n//   'Eggs',\n//   'Ice cream',\n//   'Apple',\n//   'Bread',\n//   'Fish',\n//   'Honey',\n//   'Jam',\n//   'Garlic',\n// ];\n\n// type State = {\n//   selectedGood: string\n// };\n\n// export class App extends Component<{}, State> {\n//   state: Readonly<State> = {\n//     selectedGood: 'Jam',\n//   };\n// надо чтобы функция принимала больше чем 1 параметр\n// так как события клик и не только изначально ожидают параметр евент только\n// поэтому нам надо вызыват ее в ручную () => this.isSelected(good)\n// и потом мы можем ставить свои параметры\n//   isSelected = (good: string) => {\n//     this.setState({ selectedGood: good });\n//   };\n\n//   deleteGood = () => {\n//     this.setState({ selectedGood: '' });\n//   };\n\n//   render() {\n//     const { selectedGood } = this.state;\n\n//     return (\n\n//       <main className=\"section container\">\n//         {selectedGood\n//           ? (\n//             <h1 className=\"title is-flex is-align-items-center\">\n//               {`${selectedGood} is selected`}\n//               {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n//               <button\n//                 data-cy=\"ClearButton\"\n//                 type=\"button\"\n//                 className=\"delete ml-3\"\n//                 onClick={this.deleteGood}\n//               />\n//             </h1>\n//           ) : (\n//             <h1 className=\"title\">No goods selected</h1>\n//           )}\n\n//         <table className=\"table\">\n//           <tbody>\n//             {goods.map(good => {\n//               const chosenElement = selectedGood === good;\n\n//               return (\n//                 // можно сделать два варианта верстки и не мучатся с условиями для классов\n//                 <tr\n//                   data-cy=\"Good\"\n//                   // ключ как и товары так как они пока уникальные\n//                   key={good}\n//                   // если выбраный товар соответствует тому что в переборе то вешаем класс\n//                   className={classNames({\n//                     'has-background-success-light': chosenElement,\n//                   })}\n//                 >\n//                   <td>\n//                     <button\n//                       data-cy={chosenElement\n//                         ? 'RemoveButton'\n//                         : 'AddButton'}\n//                       type=\"button\"\n//                       className={classNames('button', {\n//                         'is-info': chosenElement,\n//                       })}\n//                       // меняем тайтл при нажатии на кнопку товара\n//                       // вроде я не получаю евент и у меня есть аргумент\n//                       // поэтому я 3й пункт чеклиста не нарушаю\n//                       // если сделаю без стрелки то отображения на экране не будет\n//                       // onClick={() => this.isSelected(good)}\n//                       onClick={chosenElement\n//                         ? this.deleteGood\n//                         : () => this.isSelected(good)}\n//                     >\n//                       {chosenElement\n//                         ? '-'\n//                         : '+'}\n//                     </button>\n//                   </td>\n\n//                   <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n//                     {good}\n//                   </td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       </main>\n//     );\n//   }\n// }\n\n/* кусок тайтла чисто на тернарниках */\n//  {/* <h1 className=\"title\">No goods selected</h1> */}\n//          {/* тут тоже можно условие на два типа верстки без тернарников */}\n//          {/* тут походу так инадо делать так как от кнопки не избавится */}\n//          {/* или ставить на кнопку дисплей нон */}\n//          <h1 className=\"title is-flex is-align-items-center\">\n//          <h1 className={classNames('title', { 'is-flex is-align-items-center': titleName })}>\n//            {`${selectedGood} is selected`}\n//            {titleName ? `${selectedGood} is selected` : 'No goods selected'}\n//            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n//            <button\n//              data-cy=\"ClearButton\"\n//              type=\"button\"\n//              className=\"delete ml-3\"\n//              onClick={this.deleteGood}\n//            />\n//          </h1>\n\n// стартовая верстка\n// import React from 'react';\n// import 'bulma/css/bulma.css';\n// import './App.scss';\n\n// export const goods = [\n//   'Dumplings',\n//   'Carrot',\n//   'Eggs',\n//   'Ice cream',\n//   'Apple',\n//   'Bread',\n//   'Fish',\n//   'Honey',\n//   'Jam',\n//   'Garlic',\n// ];\n\n// export const App: React.FC = () => (\n//   <main className=\"section container\">\n//     <h1 className=\"title\">No goods selected</h1>\n\n//     <h1 className=\"title is-flex is-align-items-center\">\n//       Jam is selected\n\n//       {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n//       <button\n//         data-cy=\"ClearButton\"\n//         type=\"button\"\n//         className=\"delete ml-3\"\n//       />\n//     </h1>\n\n//     <table className=\"table\">\n//       <tbody>\n//         <tr data-cy=\"Good\">\n//           <td>\n//             <button\n//               data-cy=\"AddButton\"\n//               type=\"button\"\n//               className=\"button\"\n//             >\n//               +\n//             </button>\n//           </td>\n\n//           <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n//             Dumplings\n//           </td>\n//         </tr>\n\n//         <tr data-cy=\"Good\" className=\"has-background-success-light\">\n//           <td>\n//             <button\n//               data-cy=\"RemoveButton\"\n//               type=\"button\"\n//               className=\"button is-info\"\n//             >\n//               -\n//             </button>\n//           </td>\n\n//           <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n//             Jam\n//           </td>\n//         </tr>\n\n//         <tr data-cy=\"Good\">\n//           <td>\n//             <button\n//               data-cy=\"AddButton\"\n//               type=\"button\"\n//               className=\"button\"\n//             >\n//               +\n//             </button>\n//           </td>\n\n//           <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n//             Garlic\n//           </td>\n//         </tr>\n//       </tbody>\n//     </table>\n//   </main>\n// );\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}